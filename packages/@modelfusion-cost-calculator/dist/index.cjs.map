{"version":3,"sources":["../src/index.ts","../src/Cost.ts","../src/calculateCost.ts","../src/openai/calculators/chat.ts","../src/openai/calculators/completions.ts","../src/openai/calculators/embeddings.ts","../src/openai/calculators/images.ts","../src/openai/calculators/speech.ts","../src/openai/calculators/transcription.ts","../src/openai/OpenAICostCalculator.ts"],"sourcesContent":["export * from \"./Cost\";\nexport * from \"./CostCalculator\";\nexport * from \"./calculateCost\";\nexport * from \"./openai/OpenAICostCalculator\";\n","import { SuccessfulModelCall } from \"./SuccessfulModelCall\";\n\nexport class Cost {\n  readonly costInMillicents: number;\n  readonly hasUnknownCost: boolean;\n  readonly callsWithUnknownCost: SuccessfulModelCall[];\n\n  constructor({\n    costInMillicents,\n    hasUnknownCost,\n    callsWithUnknownCost,\n  }: {\n    costInMillicents: number;\n    hasUnknownCost: boolean;\n    callsWithUnknownCost: SuccessfulModelCall[];\n  }) {\n    this.costInMillicents = costInMillicents;\n    this.hasUnknownCost = hasUnknownCost;\n    this.callsWithUnknownCost = callsWithUnknownCost;\n  }\n\n  get costInCent(): number {\n    return this.costInMillicents / 1000;\n  }\n\n  get costInDollar(): number {\n    return this.costInCent / 100;\n  }\n\n  formatAsDollarAmount({ decimals = 2 }: { decimals?: number } = {}) {\n    return `$${this.costInDollar.toFixed(decimals)}`;\n  }\n}\n","import { Cost } from \"./Cost\";\nimport { CostCalculator } from \"./CostCalculator\";\nimport { SuccessfulModelCall } from \"./SuccessfulModelCall\";\n\nexport async function calculateCost({\n  calls,\n  costCalculators,\n}: {\n  calls: SuccessfulModelCall[];\n  costCalculators: CostCalculator[];\n}): Promise<Cost> {\n  let costInMillicents = 0;\n  const callsWithUnknownCost: SuccessfulModelCall[] = [];\n\n  for (const call of calls) {\n    const model = call.model;\n    const providerCostCalculator = costCalculators.find(\n      (providerCostCalculator) =>\n        providerCostCalculator.provider === model.provider\n    );\n\n    if (!providerCostCalculator) {\n      callsWithUnknownCost.push(call);\n      continue;\n    }\n\n    const cost = await providerCostCalculator.calculateCostInMillicents(call);\n\n    if (cost === null) {\n      callsWithUnknownCost.push(call);\n      continue;\n    }\n\n    costInMillicents += cost;\n  }\n\n  return new Cost({\n    costInMillicents,\n    hasUnknownCost: callsWithUnknownCost.length > 0,\n    callsWithUnknownCost,\n  });\n}\n","// https://openai.com/pricing\nexport const OPENAI_CHAT_MODEL_COSTS = {\n  \"gpt-4\": {\n    promptTokenCostInMillicents: 3,\n    completionTokenCostInMillicents: 6,\n  },\n  \"gpt-4-0314\": {\n    promptTokenCostInMillicents: 3,\n    completionTokenCostInMillicents: 6,\n  },\n  \"gpt-4-0613\": {\n    promptTokenCostInMillicents: 3,\n    completionTokenCostInMillicents: 6,\n    fineTunedPromptTokenCostInMillicents: null,\n    fineTunedCompletionTokenCostInMillicents: null,\n  },\n  \"gpt-4-turbo-preview\": {\n    promptTokenCostInMillicents: 1,\n    completionTokenCostInMillicents: 3,\n  },\n  \"gpt-4-1106-preview\": {\n    promptTokenCostInMillicents: 1,\n    completionTokenCostInMillicents: 3,\n  },\n  \"gpt-4-0125-preview\": {\n    promptTokenCostInMillicents: 1,\n    completionTokenCostInMillicents: 3,\n  },\n  \"gpt-4-vision-preview\": {\n    promptTokenCostInMillicents: 1,\n    completionTokenCostInMillicents: 3,\n  },\n  \"gpt-4-32k\": {\n    promptTokenCostInMillicents: 6,\n    completionTokenCostInMillicents: 12,\n  },\n  \"gpt-4-32k-0314\": {\n    promptTokenCostInMillicents: 6,\n    completionTokenCostInMillicents: 12,\n  },\n  \"gpt-4-32k-0613\": {\n    promptTokenCostInMillicents: 6,\n    completionTokenCostInMillicents: 12,\n  },\n  \"gpt-3.5-turbo\": {\n    promptTokenCostInMillicents: 0.15,\n    completionTokenCostInMillicents: 0.2,\n    fineTunedPromptTokenCostInMillicents: 0.3,\n    fineTunedCompletionTokenCostInMillicents: 0.6,\n  },\n  \"gpt-3.5-turbo-0125\": {\n    promptTokenCostInMillicents: 0.05,\n    completionTokenCostInMillicents: 0.15,\n  },\n  \"gpt-3.5-turbo-1106\": {\n    promptTokenCostInMillicents: 0.1,\n    completionTokenCostInMillicents: 0.2,\n  },\n  \"gpt-3.5-turbo-0301\": {\n    promptTokenCostInMillicents: 0.15,\n    completionTokenCostInMillicents: 0.2,\n  },\n  \"gpt-3.5-turbo-0613\": {\n    promptTokenCostInMillicents: 0.15,\n    completionTokenCostInMillicents: 0.2,\n    fineTunedPromptTokenCostInMillicents: 1.2,\n    fineTunedCompletionTokenCostInMillicents: 1.6,\n  },\n  \"gpt-3.5-turbo-16k\": {\n    promptTokenCostInMillicents: 0.3,\n    completionTokenCostInMillicents: 0.4,\n  },\n  \"gpt-3.5-turbo-16k-0613\": {\n    promptTokenCostInMillicents: 0.3,\n    completionTokenCostInMillicents: 0.4,\n  },\n  \"gpt-4o\": {\n    promptTokenCostInMillicents: 2,\n    completionTokenCostInMillicents: 4,\n  },\n} as const;\n\nexport type OpenAIChatResponse = {\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n  };\n};\n\ntype FineTuneableOpenAIChatModelType =\n  | `gpt-3.5-turbo`\n  | `gpt-3.5-turbo-0613`\n  | `gpt-4o`\n  | `gpt-4-0613`;\n\ntype FineTunedOpenAIChatModelType =\n  `ft:${FineTuneableOpenAIChatModelType}:${string}:${string}:${string}`;\n\nexport type OpenAIChatBaseModelType = keyof typeof OPENAI_CHAT_MODEL_COSTS;\n\nexport type OpenAIChatModelType =\n  | OpenAIChatBaseModelType\n  | FineTunedOpenAIChatModelType;\n\nexport const isOpenAIChatModel = (\n  model: string\n): model is OpenAIChatModelType =>\n  model in OPENAI_CHAT_MODEL_COSTS ||\n  model.startsWith(\"ft:gpt-3.5-turbo-0613:\") ||\n  model.startsWith(\"ft:gpt-3.5-turbo:\");\n\nexport const calculateOpenAIChatCostInMillicents = ({\n  model,\n  response,\n}: {\n  model: OpenAIChatModelType;\n  response: OpenAIChatResponse;\n}): number | null => {\n  if (!(model in OPENAI_CHAT_MODEL_COSTS)) return null;\n\n  const { promptTokenCostInMillicents, completionTokenCostInMillicents } =\n    OPENAI_CHAT_MODEL_COSTS[model as OpenAIChatBaseModelType];\n\n  return (\n    response.usage.prompt_tokens * promptTokenCostInMillicents +\n    response.usage.completion_tokens * completionTokenCostInMillicents\n  );\n};\n","/**\n * @see https://openai.com/pricing\n */\nexport const OPENAI_TEXT_GENERATION_MODELS = {\n  \"gpt-3.5-turbo-instruct\": {\n    promptTokenCostInMillicents: 0.15,\n    completionTokenCostInMillicents: 0.2,\n  },\n};\n\ntype OpenAICompletionModelType = keyof typeof OPENAI_TEXT_GENERATION_MODELS;\n\nexport type OpenAICompletionResponse = {\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n  };\n};\n\nexport const calculateOpenAICompletionCostInMillicents = ({\n  model,\n  response,\n}: {\n  model: OpenAICompletionModelType;\n  response: OpenAICompletionResponse;\n}) => {\n  const modelInformation = OPENAI_TEXT_GENERATION_MODELS[model];\n\n  return (\n    response.usage.prompt_tokens *\n      modelInformation.promptTokenCostInMillicents +\n    response.usage.completion_tokens *\n      modelInformation.completionTokenCostInMillicents\n  );\n};\n\nexport const isOpenAICompletionModel = (\n  model: string\n): model is OpenAICompletionModelType => model in OPENAI_TEXT_GENERATION_MODELS;\n","const EMBEDDING_MODEL_COSTS = {\n  \"text-embedding-3-small\": 0.002,\n  \"text-embedding-3-large\": 0.013,\n  \"text-embedding-ada-002\": 0.01,\n};\n\nexport type TextEmbeddingResponse = Partial<{\n  usage: {\n    total_tokens: number;\n  };\n}>;\n\ntype OpenAITextEmbeddingModelType = keyof typeof EMBEDDING_MODEL_COSTS;\n\nexport const isOpenAIEmbeddingModel = (\n  model: string\n): model is OpenAITextEmbeddingModelType => model in EMBEDDING_MODEL_COSTS;\n\nexport const calculateOpenAIEmbeddingCostInMillicents = ({\n  model,\n  responses,\n}: {\n  model: OpenAITextEmbeddingModelType;\n  responses: TextEmbeddingResponse[];\n}): number => {\n  let amountInMilliseconds = 0;\n\n  for (const response of responses) {\n    amountInMilliseconds +=\n      response.usage!.total_tokens * EMBEDDING_MODEL_COSTS[model];\n  }\n\n  return amountInMilliseconds;\n};\n","export const OPENAI_IMAGE_MODELS = {\n  \"dall-e-2\": {\n    getCost(settings: OpenAIImageGenerationCallSettings) {\n      switch (settings.size ?? \"1024x1024\") {\n        case \"1024x1024\":\n          return 2000;\n        case \"512x512\":\n          return 1800;\n        case \"256x256\":\n          return 1600;\n        default:\n          return null;\n      }\n    },\n  },\n  \"dall-e-3\": {\n    getCost(settings: OpenAIImageGenerationCallSettings) {\n      switch (settings.quality ?? \"standard\") {\n        case \"standard\": {\n          switch (settings.size ?? \"1024x1024\") {\n            case \"1024x1024\":\n              return 4000;\n            case \"1024x1792\":\n            case \"1792x1024\":\n              return 8000;\n            default:\n              return null;\n          }\n        }\n        case \"hd\": {\n          switch (settings.size ?? \"1024x1024\") {\n            case \"1024x1024\":\n              return 8000;\n            case \"1024x1792\":\n            case \"1792x1024\":\n              return 12000;\n            default:\n              return null;\n          }\n        }\n      }\n    },\n  },\n};\n\nexport type OpenAIImageModelType = keyof typeof OPENAI_IMAGE_MODELS;\n\nexport interface OpenAIImageGenerationCallSettings {\n  size?: \"256x256\" | \"512x512\" | \"1024x1024\" | \"1792x1024\" | \"1024x1792\";\n  quality?: \"standard\" | \"hd\";\n  numberOfGenerations?: number;\n}\n\n/**\n * @see https://openai.com/pricing\n */\nexport const calculateOpenAIImageGenerationCostInMillicents = ({\n  model,\n  settings,\n}: {\n  model: OpenAIImageModelType;\n  settings: OpenAIImageGenerationCallSettings;\n}): number | null => {\n  const cost = OPENAI_IMAGE_MODELS[model]?.getCost(settings);\n\n  if (cost == null) {\n    return null;\n  }\n\n  return (settings.numberOfGenerations ?? 1) * cost;\n};\n","// cost per character in millicents\nconst SpeechModelCosts = {\n  \"tts-1\": 1.5, // = 1500 / 1000,\n  \"tts-1-hd\": 3, // = 3000 / 1000\n};\n\nexport type OpenAISpeechModelType = keyof typeof SpeechModelCosts;\n\nexport const calculateOpenAISpeechCostInMillicents = ({\n  model,\n  input,\n}: {\n  model: keyof typeof SpeechModelCosts;\n  input: string;\n}): number | null => {\n  if (!SpeechModelCosts[model]) {\n    return null;\n  }\n\n  return input.length * SpeechModelCosts[model];\n};\n","/**\n * @see https://openai.com/pricing\n */\nexport const TRANSCRIPTION_MODEL_COSTS = {\n  \"whisper-1\": 10, // = 600 / 60,\n};\n\nexport type OpenAITranscriptionModelType =\n  keyof typeof TRANSCRIPTION_MODEL_COSTS;\n\nexport type TranscriptionResponse = {\n  duration: number;\n};\n\nexport const calculateOpenAITranscriptionCostInMillicents = ({\n  model,\n  response,\n}: {\n  model: OpenAITranscriptionModelType;\n  response: TranscriptionResponse;\n}): number | null => {\n  if (model !== \"whisper-1\") {\n    return null;\n  }\n\n  const durationInSeconds = response.duration;\n\n  return Math.ceil(durationInSeconds) * TRANSCRIPTION_MODEL_COSTS[model];\n};\n","import {\n  calculateOpenAIChatCostInMillicents,\n  calculateOpenAICompletionCostInMillicents,\n  calculateOpenAIEmbeddingCostInMillicents,\n  calculateOpenAIImageGenerationCostInMillicents,\n  calculateOpenAISpeechCostInMillicents,\n  calculateOpenAITranscriptionCostInMillicents,\n  isOpenAIEmbeddingModel,\n  TextEmbeddingResponse,\n  OpenAISpeechModelType,\n  TranscriptionResponse,\n  OpenAITranscriptionModelType,\n  OpenAIImageModelType,\n  OpenAIImageGenerationCallSettings,\n  OpenAICompletionResponse,\n  isOpenAICompletionModel,\n  OpenAIChatResponse,\n  isOpenAIChatModel,\n} from \"./calculators\";\n\nimport { CostCalculator } from \"../CostCalculator\";\nimport { SuccessfulModelCall } from \"../SuccessfulModelCall\";\n\nexport class OpenAICostCalculator implements CostCalculator {\n  readonly provider = \"openai\";\n\n  async calculateCostInMillicents(\n    call: SuccessfulModelCall\n  ): Promise<number | null> {\n    const { model, functionType, result } = call;\n    const { modelName } = model;\n    const { rawResponse } = result;\n\n    switch (functionType) {\n      case \"generate-image\": {\n        if (modelName == null) {\n          return null;\n        }\n\n        return calculateOpenAIImageGenerationCostInMillicents({\n          model: modelName as OpenAIImageModelType,\n          settings: call.settings as OpenAIImageGenerationCallSettings,\n        });\n      }\n\n      case \"embed\": {\n        if (modelName == null) {\n          return null;\n        }\n\n        if (isOpenAIEmbeddingModel(modelName)) {\n          const responses = Array.isArray(call.result.rawResponse)\n            ? (rawResponse as TextEmbeddingResponse[])\n            : [rawResponse as TextEmbeddingResponse];\n\n          return calculateOpenAIEmbeddingCostInMillicents({\n            model: modelName,\n            responses,\n          });\n        }\n        break;\n      }\n\n      case \"generate-object\":\n      case \"generate-text\": {\n        if (modelName == null) {\n          return null;\n        }\n\n        if (isOpenAIChatModel(modelName)) {\n          return calculateOpenAIChatCostInMillicents({\n            model: modelName,\n            response: rawResponse as OpenAIChatResponse,\n          });\n        }\n\n        if (isOpenAICompletionModel(modelName)) {\n          return calculateOpenAICompletionCostInMillicents({\n            model: modelName,\n            response: rawResponse as OpenAICompletionResponse,\n          });\n        }\n\n        break;\n      }\n\n      case \"generate-transcription\": {\n        if (modelName == null) {\n          return null;\n        }\n\n        return calculateOpenAITranscriptionCostInMillicents({\n          model: modelName as OpenAITranscriptionModelType,\n          response: call.result.rawResponse as TranscriptionResponse,\n        });\n      }\n\n      case \"generate-speech\": {\n        if (modelName == null) {\n          return null;\n        }\n        return calculateOpenAISpeechCostInMillicents({\n          model: modelName as OpenAISpeechModelType,\n          input: call.input as string,\n        });\n      }\n    }\n\n    return null;\n  }\n}\n"],"mappings":"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","names":["providerCostCalculator"]}